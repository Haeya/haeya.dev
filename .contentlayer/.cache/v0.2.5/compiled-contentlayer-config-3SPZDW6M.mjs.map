{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypeSlug from 'rehype-slug'\nimport rehypeCodeTitles from 'rehype-code-titles'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrism from 'rehype-prism-plus'\n\nimport type { DocumentGen } from 'contentlayer/core'\n\nexport const urlFromFilePath = (doc: DocumentGen): string => {\n  return doc._raw.flattenedPath.replace(/pages\\/?/, '')\n}\n\nexport const Note = defineDocumentType(() => ({\n  name: 'Note',\n  filePathPattern: `note/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'string', required: true },\n  },\n  computedFields: {\n    url_path: {\n      type: 'string',\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: urlFromFilePath,\n    },\n    pathSegments: {\n      type: 'json',\n      resolve: doc =>\n        doc._raw.flattenedPath\n          .split('/')\n          // skip `/docs` prefix\n          .slice(1)\n          .map(pathName => {\n            return { pathName }\n          }),\n    },\n  },\n}))\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: `blog/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    thumbnailUrl: { type: 'string', required: true },\n    tags: {\n      type: 'list',\n      required: true,\n      of: {\n        type: 'string',\n      },\n      default: [],\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'posts',\n  documentTypes: [Blog, Note],\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeCodeTitles,\n      rehypePrism,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['anchor'],\n          },\n        },\n      ],\n    ],\n  },\n})\n"],
  "mappings": ";AAAA;AACA;AACA;AACA;AACA;AAIO,IAAM,kBAAkB,CAAC,QAA6B;AAC3D,SAAO,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AACtD;AAEO,IAAM,OAAO,mBAAmB,MAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EACzC;AAAA,EACA,gBAAgB;AAAA,IACd,UAAU;AAAA,MACR,MAAM;AAAA,MACN,aACE;AAAA,MACF,SAAS;AAAA,IACX;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,SACP,IAAI,KAAK,cACN,MAAM,GAAG,EAET,MAAM,CAAC,EACP,IAAI,cAAY;AACf,eAAO,EAAE,SAAS;AAAA,MACpB,CAAC;AAAA,IACP;AAAA,EACF;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,MAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,cAAc,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC/C,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,MACV,IAAI;AAAA,QACF,MAAM;AAAA,MACR;AAAA,MACA,SAAS,CAAC;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,SAAO,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IAC9D;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,IAAI;AAAA,EAC1B,KAAK;AAAA,IACH,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,QAAQ;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
